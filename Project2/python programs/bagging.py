# -*- coding: utf-8 -*-
"""Bagging.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_em97fwdZ1xFJFTGA3tMmEBhdO5aXDfg
"""

import pandas as pd
from sklearn.model_selection import train_test_split, cross_val_score
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.manifold import TSNE
from sklearn.naive_bayes import BernoulliNB, GaussianNB, CategoricalNB, MultinomialNB
import numpy as np
from sklearn.metrics import  ConfusionMatrixDisplay,\
                  classification_report,  RocCurveDisplay, PrecisionRecallDisplay,\
                    accuracy_score, f1_score, precision_score, recall_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import MinMaxScaler, StandardScaler
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import BaggingClassifier
from scipy import stats

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv("drive/MyDrive/MD/Project_2/Data/Cleaned_Dataset.csv", sep=",", encoding="UTF-8")
df

df = df.dropna()

cls = [str(v) for v in df['Credit_Score'].unique()]
cls

df.columns

X = df.loc[:,df.columns !="Credit_Score"]
y = df["Credit_Score"]

scaler=MinMaxScaler()
X=pd.DataFrame(scaler.fit_transform(X))

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

cv=10
iter=40

!pip install skopt
!pip install scikit-optimize
import skopt
from skopt import BayesSearchCV

dt =  DecisionTreeClassifier(random_state=0)
dt_bg =  BaggingClassifier(base_estimator=dt,n_estimators=200,max_features=0.35, n_jobs=-1, random_state=0)
scores = cross_val_score(dt_bg,X_train,y_train,cv=10)
print("Mean accuracy: {:.2f}%".format(np.mean(scores)*100))
print("Variance: {:.4f}".format(np.var(scores)))
dt_bg.fit(X_train, y_train);

bg_predictions = dt_bg.predict(X_test)

print(classification_report(bg_predictions, y_test,target_names=cls))

alpha = 0.05
n = len(bg_predictions)
mean = np.mean(bg_predictions)
std_error = stats.sem(bg_predictions)
confidence_interval = stats.t.interval(1 - alpha, n - 1, loc=mean, scale=std_error)
print("Confidence Interval:", confidence_interval)

plt.figure(figsize=(8,8));
ConfusionMatrixDisplay.from_estimator(dt_bg, X_test,y_test, display_labels=cls, ax=plt.subplot());